---
- hosts: localhost
  gather_facts: no
  vars:
    aws_region: "{{ region | default('us-east-1') }}"
    masters: "{{ num_masters| default(1) }}"
    workers: "{{ num_workers| default(1) }}"
    ec2_image: "{{ image_id| default('ami-04505e74c0741db8d') }}"
    ec2_instance_type: "{{ ec2_type| default('t2.micro') }}"
    default_vpc: no
    aws_default_vpc_az: "{{ default_vpc_az| default('us-east-1b') }}"
    ec2_group: "{{ sig_group | default('ec2nodes') }}"
    aws_key_name: "{{ aws_key| default('amazontestkey') }}"
    port_num: 31033
  tasks:
  - fail: msg="cluster_name is required"
    when: cluster_name is undefined

  - name: Get public IP address of the host of Ansible engine
    shell: curl ifconfig.me
    register: my_public_ip

  - name: Get facts about default VPC
    amazon.aws.ec2_vpc_net_info:
      region: "{{ aws_region }}"
      filters:
        "isDefault": yes
    register: vpc_info
    when: default_vpc | bool

  - name: Print all default VPC facts
    ansible.builtin.debug:
      var: aws_default_vpc_az
    when: default_vpc | bool

  - name: Set vpc_id facts for the default VPC
    set_fact: 
      vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
    when: default_vpc | bool    

  - name: Get facts for public subnet associated with selected availability zone and default VPC
    amazon.aws.ec2_vpc_subnet_info:
      filters:
        vpc-id: "{{ vpc_id }}"
        availability-zone: "{{ aws_default_vpc_az }}"
      region: "{{ aws_region }}"
    register: subnets_info
    when: default_vpc | bool 


  - name: Print all subnets available facts
    ansible.builtin.debug:
      var: subnets_info
    when: default_vpc | bool 
 

  - name: Read VPC configuration data
    include_vars: ".data/{{ aws_region }}_vpc_helper_vars.yaml"
    when: not default_vpc

  - name: Set subnet id fact for default VPC
    set_fact: 
      public_subnet_id: "{{ subnets_info.subnets[0].id }}" 
    when: default_vpc | bool  

  - name: Create security group
    amazon.aws.ec2_group:
      name: "{{ ec2_group }}"
      description: Used for Ansible automation
      region: "{{ aws_region }}"
      vpc_id: "{{ vpc_id }}"
      rules:
        - proto: tcp
          ports: 22
          cidr_ip: "{{ my_public_ip.stdout }}/32"
        - proto: tcp
          ports: 6443
          cidr_ip: "0.0.0.0/0"
        - proto: tcp
          ports:
          - "{{ port_num }}"
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port {{ port_num }}
        - proto: -1
          ports: -1
          group_name: "{{ ec2_group }}"
    diff: false 

  - name: Create EC2 instances
    include_role: name=ec2instances
    vars:
      verb: create
      ec2_region: "{{ aws_region }}"
      ec2_image_id: "{{ ec2_image }}"
      group: "{{ ec2_group }}"
      instance_type: "{{ ec2_instance_type }}"
      vpc_subnet_id: "{{ public_subnet_id }}"
      key_name: "{{ aws_key_name }}"
      count: "{{ masters | int + workers | int }}"

  - name: Show instance data
    debug:
      msg:
      - "{{ ec2_instances }}"
      - "{{ public_ips }}"
      - "{{ private_ips }}"

  - name: Create a directory to persist data
    ansible.builtin.file:
      path: .data
      state: directory
      mode: '0755'

  - name: Persist instance data
    ansible.builtin.copy:
      content: "{{ ec2_instances | to_nice_json }}"
      dest: ".data/ec2_instances_{{ cluster_name }}.json"

  - name: Assign IPs for k8s masters and workers
    split_ips:
      cluster_name: "{{ cluster_name }}"
      public_ips: "{{ public_ips }}"
      position: "{{ masters | int }}"
    register: split
  - debug:
      var: split
