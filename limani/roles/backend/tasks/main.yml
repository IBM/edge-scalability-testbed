---
# pki
- name: Build pki
  shell: |
    hack/ca-init.sh
  args:
    chdir: /root/limani/

- name: Pack pki
  shell: |
    tar czf pki.tgz hack/pki/
  args:
    chdir: /root/limani/

- name: Fetch pki
  ansible.builtin.fetch:
    src: /root/limani/pki.tgz
    dest: /tmp/pki.tgz
    flat: true

- name: Remove pki pack
  ansible.builtin.file:
    path: /root/limani/pki.tgz
    state: absent


# container image for credentials
- name: Change mode for credentials
  file:
    path: /root/limani/hack/pki/ca/ca.crt
    mode: 0644

- name: Change mode for credentials
  file:
    path: /root/limani/hack/pki/ca/private/ca.key
    mode: 0644

- name: Change mode for credentials
  file:
    path: /root/limani/hack/pki/ca/issued/server.crt
    mode: 0644

- name: Change mode for credentials
  file:
    path: /root/limani/hack/pki/ca/private/server.key
    mode: 0644

- name: Copy Dockerfile for the credentials container image
  ansible.builtin.copy:
    src: Dockerfile_Credentials
    dest: /root/limani/deploy/Dockerfile_Credentials

- name: Prepare the kubeconfig file for the credentials container image
  shell: |
    cp /root/.kube/config /root/limani/kube.conf

- name: Get the public IP address of the node
  shell: curl ifconfig.me
  register: node_public_ip

- name: Replace apiserver's IP address in the kubeconfig file
  ansible.builtin.replace:
    path: /root/limani/kube.conf
    regexp: '^\s+server:.*'
    replace: "    server: https://{{ node_public_ip.stdout }}:6443"

- name: Get AWS account ID
  shell: |
    aws sts get-caller-identity --query "Account" --output text
  register: aws_account_id

- name: Compose the name of the credentials container image
  set_fact:
    credentials_image: "{{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region_ecr }}.amazonaws.com/limani/credentials"

- name: Build the credentials container image
  shell: |
    docker build -t {{ credentials_image }} -f deploy/Dockerfile_Credentials .
  args:
    chdir: /root/limani/

- name: Fetch the kubeconfig file
  ansible.builtin.fetch:
    src: /root/limani/kube.conf
    dest: ../.data/limani_backend_kubeconfig
    flat: true

- name: Remove the kubeconfig file
  shell: |
    rm -f /root/limani/kube.conf

- name: Login AWS ECR
  shell: |
    aws ecr get-login-password --region {{ aws_region_ecr }} | docker login --username AWS --password-stdin {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region_ecr }}.amazonaws.com

- name: Create Repo for the credentials container image on AWS ECR
  shell: |
    aws ecr create-repository --repository-name limani/credentials --region {{ aws_region_ecr }} 2>/dev/null | true

- name: Push the credentials container image to AWS ECR
  shell: |
    docker push {{ credentials_image }}

- name: Show the credentials container image
  debug:
    msg: "Container image for credentials: {{ credentials_image }}"


# deployment
- name: Login to registry
  shell: |
    docker login -u {{ img_registry }} -p {{ img_registry_pswd }}

- name: Build and push images for limani controllers, device server, and device simulator
  shell: |
    export PATH=$PATH:/usr/local/go/bin
    make docker-build docker-push IMG_REGISTRY={{ img_registry }}
  args:
    chdir: /root/limani/

- name: Deploy limani controllers, limani device server, and Dynamodb
  shell: |
    export PATH=$PATH:/usr/local/go/bin
    export AWS_ACCESS_KEY={{ aws_access_key }}
    export AWS_SECRET_KEY={{ aws_secret_key }}
    export AWS_REGION={{ aws_region_dynamodb }}
    make deploy IMG_REGISTRY={{ img_registry }} PLACE={{ place }}
  args:
    chdir: /root/limani/

- name: Update nodePort for service limani-deviceserver
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: limani-deviceserver
        namespace: limani-system
      spec:
        ports:
        - nodePort: "{{ deviceserver_node_port }}"
          port: 8443
          protocol: TCP
          targetPort: 8443


# one-shot agent
- name: Generate cert for agent
  shell: |
    hack/device-cert.sh foo
  args:
    executable: /bin/bash
    chdir: /root/limani/

- name: Create examples for configspec and devicegroup
  shell: |
    kubectl apply -f deploy/cr-samples/edge_v1alpha1_configspec.yaml
    kubectl apply -f deploy/cr-samples/edge_v1alpha1_devicegroup.yaml
  args:
    chdir: /root/limani/

- name: Create an example for inventorydevice
  shell: |
    deploy/mk-device.sh foo devicegroup-sample
  args:
    chdir: /root/limani/

- name: Find the device server's nodePort
  shell: |
    kubectl -n limani-system get svc limani-deviceserver -ojsonpath="{.spec.ports[0].nodePort}"
  register: device_server_nodeport

- name: Run the agent for once
  shell: |
    export PATH=$PATH:/usr/local/go/bin
    export DEVICE_SERVER=https://127.0.0.1:{{ device_server_nodeport.stdout }}
    export DEVICE=foo
    go run cmd/agent/main.go --server $DEVICE_SERVER -ca ./hack/pki/ca/ca.crt -client-cert ./hack/pki/ca/issued/$DEVICE.crt -client-key ./hack/pki/clients/$DEVICE/private/$DEVICE.key -device $DEVICE
  args:
    chdir: /root/limani/
