---
- hosts: localhost
  gather_facts: no
  vars:
    region: "{{ region }}"
    cluster_name: "{{ ec2_cluster_name | default('limani') }}"
    port_num: 31033
    ecs_device: no
  tasks:
    - include_vars: "../.data/{{ region }}_vpc_helper_vars.yaml"

    - name: Read instance data
      include_vars:
        #file: "../.data/ec2_instances_{{ cluster_name }}.json"
        file: "../.data/ec2_instances_{{ region }}.json"
        name: ec2_instances
      when: not ecs_device

    - name: Get private IPs
      set_fact:
        private_ips: "{{ ec2_instances | community.general.json_query('instances[*].private_ip') }}"
      when: not ecs_device


    - name: Create and Add items to dictionary
      set_fact: 
          target_list: "{{ target_list | default([]) + [{ 'Id' : item, 'Port' : port_num | int }] }}"
      with_items: 
        - "{{ private_ips }}"
      when: not ecs_device

    - name: Debug Message Target Group
      ansible.builtin.debug:
        msg: "{{ target_list }}"
      when: not ecs_device

    - name: Create a target group with a default health check
      community.aws.elb_target_group:
        name: "{{ cluster_name }}-targetGroup"
        region: "{{ region }}"
        protocol: tcp
        target_type: ip
        port: "{{ port_num }}"
        vpc_id:  "{{ vpc_id }}"
        targets: "{{ target_list }}"
        state: present
      register: target_group_output
      when: not ecs_device

    - name: Debug Message Target Group
      ansible.builtin.debug:
        msg: "{{ target_group_output}}"
      when: not ecs_device


    - name: Create a ECS target group with a default health check
      community.aws.elb_target_group:
        name: "{{ cluster_name }}-targetGroup"
        region: "{{ region }}"
        protocol: tcp
        target_type: ip
        port: "{{ port_num }}"
        vpc_id:  "{{ vpc_id }}"
        state: present
      register: ecs_target_group_output
      when: ecs_device | bool


    - name: Debug Message ECS Target Group
      ansible.builtin.debug:
        msg: "{{ ecs_target_group_output }}"
      when: ecs_device | bool


    - name: Create an ELB with an attached Elastic IP address
      community.aws.elb_network_lb:
        name: "{{ cluster_name }}-elb-network"
        region: "{{ region }}"
        subnets:
          -  "{{ public_subnet_id }}"
          -  "{{ extra_public_subnet_id }}"
        listeners:
          - Protocol: TCP # Required. The protocol for connections from clients to the load balancer (TCP, TLS, UDP or TCP_UDP) (case-sensitive).
            Port: "{{ port_num }}" # Required. The port on which the load balancer is listening.
            DefaultActions:
              - Type: forward # Required. Only 'forward' is accepted at this time
                TargetGroupName: "{{ cluster_name }}-targetGroup" # Required. The name of the target group
        state: present 
        scheme: internet-facing
        wait: yes
      register: elb_network_output

    - name: Debug Message for ELB
      ansible.builtin.debug:
        msg: "{{ elb_network_output }}"


    - name: Create vars file to help with deletion of resources
      ansible.builtin.copy:
        content: "region: {{ region }}\ncluster_name: {{ cluster_name }}\nvpc_id: {{ vpc_id }}\ntargetGroupArn: {{ target_group_output.target_group_arn}}\nendpoint_arn: {{ elb_network_output.load_balancer_arn }}"
        dest: "../.data/{{ region }}_network_elb_helper_vars.yaml"
      when: not ecs_device

    - name: Create vars file to help with deletion of ECS resources
      ansible.builtin.copy:
        content: "region: {{ region }}\ncluster_name: {{ cluster_name }}\nvpc_id: {{ vpc_id }}\ntargetGroupArn: {{ ecs_target_group_output.target_group_arn}}\nendpoint_arn: {{ elb_network_output.load_balancer_arn }}"
        dest: "../.data/{{ region }}_network_elb_helper_vars.yaml"
      when: ecs_device | bool